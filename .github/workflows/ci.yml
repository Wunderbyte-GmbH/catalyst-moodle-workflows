# .github/workflows/ci.yml
name: ci

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_call:
    inputs:
      internal_workflow_branch:
        type: string
        description: 'Sets the branch the reusable workflow calls reusable workflow actions with'
        default: 'main'
      codechecker_max_warnings:
        type: string
        description: 'Sets the value for --max-warnings on the moodle-plugin-ci codechecker step. Defaults to -1 which means no limit.'
        default: '-1'
      extra_php_extensions:
        type: string
      extra_plugin_runners:
        type: string
      workarounds:
        type: string
        description: 'Custom workaround commands to run before the main CI process'
        required: false
      custom_steps:
        type: string
        description: 'Custom steps to run at the end of the CI workflow'
        required: false
      disable_behat:
        type: boolean
      disable_mustache:
        type: boolean
      disable_phplint:
        type: boolean
      disable_phpdoc:
        type: boolean
        description: 'If true, this will skip testing phpdocs'
        default: false
      disable_phpcs:
        type: boolean
        description: 'If true, this will skip testing php code standards'
        default: false
      disable_phpunit:
        type: boolean
      disable_grunt:
        type: boolean
      disable_master:
        description: 'If true, this will skip testing against moodle/main branch'
        type: boolean
      disable_release:
        description: 'If true, this will skip the release job'
        type: boolean
        default: false
      enable_phpmd:
        type: boolean
        default: false
      disable_phpcpd:
        type: boolean
        default: false
      disable_ci_validate:
        type: boolean
        default: false
      release_branches:
        description: 'Required if the branch that should process releases is in a non-standard format (e.g. main or MOODLE_XX_STABLE)'
        type: string
      moodle_branches:
        description: 'Specify the MOODLE_XX_STABLE branch you want to test against'
        type: string
      min_php:
        description: 'Specify the minimum version of PHP to test against. Will exclude workflows using older versions of PHP.'
        type: string
        default: '7.4'
      mustache_ignore_names:
        type: string
        description: 'Mustache templates to ignore during the CI process'
        required: false
        default: ''
      codechecker_ignore_paths:
        type: string
        description: 'Paths to ignore during codechecker checks'
        required: false
        default: ''
      phpdocchecker_ignore_paths:
        type: string
        description: 'Paths to ignore during phpdoc checks'
        required: false
        default: ''
      ignore_paths:
        description: 'Specify custom paths for CI to ignore. Third party libraries are ignored by default.'
        type: string
        default: ''
      ignore_names:
        description: 'Specify custom names for CI to ignore. Third party libraries are ignored by default.'
        type: string
        default: ''
    secrets:
      moodle_org_token:
        required: false
      brandname:
        required: false
      clientid:
        required: false
      payone_secret:
        required: false
      mpay_secret:
        required: false
      ssh_private_key:
        required: false

jobs:
  prepare_matrix:
    name: prepare test matrix
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-${{ inputs.moodle_branches }}
      cancel-in-progress: true
    runs-on: 'ubuntu-latest'
    outputs:
      matrix: ${{ steps.parse-version.outputs.matrix }}
      component: ${{ steps.parse-version.outputs.component }}
      highest_moodle_branch: ${{ steps.parse-version.outputs.highest_moodle_branch }}
      release_required: ${{ (
          contains(github.event_name, 'push') &&
          steps.check-version.outputs.any_changed == 'true' &&
          steps.check-branch.outputs.publishable == 'true'
        ) }}
    steps:
      - name: Check if currently on a publishable branch
        id: check-branch
        run: |
          publishable=${{ github.event.repository.fork == false &&
          inputs.disable_release == false && (
            (startsWith(github.ref, 'refs/heads/MOODLE_') &&
            endsWith(github.ref, '_STABLE')) ||
            github.ref == 'refs/heads/main' || (
              inputs.release_branches != '' &&
              endsWith(github.ref, inputs.release_branches)
            )
          ) }}

          echo "publishable=$publishable" >> $GITHUB_OUTPUT
      - name: Check out CI code
        uses: actions/checkout@v4
        with:
          path: ci
          repository: Wunderbyte-GmbH/catalyst-moodle-workflows
          ref: ${{ inputs.internal_workflow_branch }}
          token: ${{ github.token }}
      - name: Check out plugin code
        uses: actions/checkout@v4
        with:
          # Needed for 'changed-files' actions (alternatively could be a fixed
          # large number but may cause issues if limited).
          fetch-depth: 20
          path: plugin
          submodules: true
      - name: Check if release is required (version.php changes)
        if: contains(github.event_name, 'push') && steps.check-branch.outputs.publishable == 'true'
        uses: tj-actions/changed-files@2f7c5bfce28377bc069a65ba478de0a74aa0ca32 # v46.0.1
        id: check-version
        with:
          path: plugin
          files: |
            version.php
          since_last_remote_commit: "true"
      - name: Install PHP
        uses: shivammathur/setup-php@9e72090525849c5e82e596468b86eb55e9cc5401 # v2.32.0
        with:
          php-version: '8.1'
          coverage: none
          # extensions: yaml # FYI: makes the workflow very slow
      - name: Determine test requirements and plugin info
        id: parse-version
        run: |
          chmod +x "${GITHUB_WORKSPACE}/ci/.github/actions/parse-version/script.sh"
          "${GITHUB_WORKSPACE}/ci/.github/actions/parse-version/script.sh"
        env:
          disable_master: ${{ inputs.disable_master }}
          filter: ${{ inputs.moodle_branches }}
          min_php: ${{ inputs.min_php }}

  setup:
    name: ${{ matrix.moodle-branch }} - ${{ matrix.database }} - php ${{ matrix.php }} - ${{ needs.prepare_matrix.outputs.component }}
    needs: prepare_matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare_matrix.outputs.matrix) }}
    env:
      IGNORE_PATHS: tests/fixtures
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-${{ matrix.moodle-branch }}-${{ matrix.database }}-${{ matrix.php }}-${{ needs.prepare_matrix.outputs.component }}
      cancel-in-progress: true
    runs-on: 'ubuntu-latest'
    services:
      postgres:
        image: "postgres:${{ matrix.pgsql-ver }}"
        env:
          POSTGRES_USER: 'postgres'
          POSTGRES_HOST_AUTH_METHOD: 'trust'
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
        ports:
          - 5432:5432
      mariadb:
        image: "mariadb:${{ matrix.mariadb-ver }}"
        env:
          MYSQL_USER: 'root'
          MYSQL_ALLOW_EMPTY_PASSWORD: "true"
          MYSQL_CHARACTER_SET_SERVER: "utf8mb4"
          MYSQL_COLLATION_SERVER: "utf8mb4_unicode_ci"
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
    steps:
      - name: Set custom environment variables
        run: |
          USER_IGNORE_PATHS="${{ inputs.ignore_paths }}"
          if [ -n "${USER_IGNORE_PATHS}" ]; then
            IGNORE_PATHS="${IGNORE_PATHS},${USER_IGNORE_PATHS}"
            echo "IGNORE_PATHS=${IGNORE_PATHS}" >> $GITHUB_ENV
          fi

          # Set IGNORE_NAMES if provided
          if [ -n "${{ inputs.ignore_names }}" ]; then
            echo "IGNORE_NAMES=${{ inputs.ignore_names }}" >> $GITHUB_ENV
          fi

          # Set MUSTACHE_IGNORE_NAMES if provided
          if [ -n "${{ inputs.mustache_ignore_names }}" ]; then
            echo "MUSTACHE_IGNORE_NAMES=${{ inputs.mustache_ignore_names }}" >> $GITHUB_ENV
          fi

          # Set CODECHECKER_IGNORE_PATHS if provided
          if [ -n "${{ inputs.codechecker_ignore_paths }}" ]; then
            echo "CODECHECKER_IGNORE_PATHS=${{ inputs.codechecker_ignore_paths }}" >> $GITHUB_ENV
          fi

          # Set PHPDOCCHECKER_IGNORE_PATHS if provided
          if [ -n "${{ inputs.phpdocchecker_ignore_paths }}" ]; then
            echo "PHPDOCCHECKER_IGNORE_PATHS=${{ inputs.phpdocchecker_ignore_paths }}" >> $GITHUB_ENV
          fi

          # Set PAYONE related environment variables if secrets are provided
          if [ -n "${{ secrets.brandname }}" ]; then
            echo "BRANDNAME=${{ secrets.brandname }}" >> $GITHUB_ENV
          fi

          if [ -n "${{ secrets.clientid }}" ]; then
            echo "CLIENTID=${{ secrets.clientid }}" >> $GITHUB_ENV
          fi

          if [ -n "${{ secrets.payone_secret }}" ]; then
            echo "PAYONE_SECRET=${{ secrets.payone_secret }}" >> $GITHUB_ENV
          fi

          if [ -n "${{ secrets.mpay_secret }}" ]; then
            echo "MPAY_SECRET=${{ secrets.mpay_secret }}" >> $GITHUB_ENV
          fi

      - name: Setup SSH key for private repositories
        if: ${{ secrets.ssh_private_key != '' }}
        run: |
          # Create SSH directory
          mkdir -p ~/.ssh
          
          # Add SSH private key
          echo "${{ secrets.ssh_private_key }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Add GitHub to known hosts
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          
          # Start SSH agent and add key
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa
          
          # Configure git to use SSH for GitHub
          git config --global url."git@github.com:".insteadOf "https://github.com/"

      - name: Check out CI code
        uses: actions/checkout@v4
        with:
          path: ci
          repository: Wunderbyte-GmbH/catalyst-moodle-workflows
          ref: ${{ inputs.internal_workflow_branch }}
          token: ${{ github.token }}

      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          path: plugin
          submodules: true
      - name: Install node  ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - name: Setup PHP ${{ matrix.php }}
        uses: shivammathur/setup-php@9e72090525849c5e82e596468b86eb55e9cc5401 # v2.32.0
        with:
          php-version: ${{ matrix.php }}
          ini-values: max_input_vars=5000
          extensions: pgsql, mysqli, zip, gd, xmlrpc, soap, ${{ inputs.extra_php_extensions }}
          coverage: none

      - name: Configure Required Composer Version
        id: install-composer1
        if: ${{ matrix.moodle-branch == 'MOODLE_32_STABLE' || matrix.moodle-branch == 'MOODLE_33_STABLE' }}
        run: |
          echo "COMPOSER_VERSION=--1" >> $GITHUB_OUTPUT


      - name: Update Composer
        if: ${{ matrix.moodle-branch == 'MOODLE_32_STABLE' || matrix.moodle-branch == 'MOODLE_33_STABLE' }}
        run: |
          composer self-update ${{ steps.install-composer1.outputs.COMPOSER_VERSION }}


      - name: Initialise moodle-plugin-ci
        run: |
          # Initialise moodle-plugin-ci (install via composer)
          echo "::group::Initialise moodle-plugin-ci"

          composer create-project -n --no-dev --prefer-dist moodlehq/moodle-plugin-ci m-ci ^4
          # Add dirs to $PATH
          echo $(cd m-ci/bin; pwd) >> $GITHUB_PATH
          echo $(cd m-ci/vendor/bin; pwd) >> $GITHUB_PATH
          # PHPUnit depends on en_AU.UTF-8 locale
          sudo locale-gen en_AU.UTF-8

          echo "::endgroup::"

      - name: Install dependencies
        if: ${{ inputs.extra_plugin_runners }}
        run: |
          # Install dependencies
          echo "::group::Install dependencies"

          ${{ inputs.extra_plugin_runners }}

          echo "::endgroup::"

      - name: Install Moodle
        run: |
          # Install moodle commands
          echo "::group::Moodle install output"

          moodle-plugin-ci install -vvv --plugin ./plugin --db-host=127.0.0.1

          echo "::endgroup::"
        env:
          DB: ${{ matrix.database }}
          MOODLE_BRANCH: ${{ matrix.moodle-branch }}

      - name: Install Core Patches
        if: ${{ always() }}
        # We should attempt to install a patch, and pass if there isnt one for the branch.
        run: |
          git config --global user.email "test@test.com"
          git config --global user.name "Test"
          ((test -f plugin/patch/${{ matrix.moodle-branch }}.diff && cd moodle && git am --whitespace=nowarn < ../plugin/patch/${{ matrix.moodle-branch }}.diff) || echo No patch found;)

      - name: Run custom workarounds
        if: ${{ inputs.workarounds }}
        run: |
          # Run custom workarounds
          echo "::group::Running custom workarounds"

          ${{ inputs.workarounds }}

          echo "::endgroup::"

      - name: Run phplint
        if: ${{ always() && inputs.disable_phplint != true }}
        run: moodle-plugin-ci phplint

      - name: PHP Copy/Paste Detector
        continue-on-error: true # This step will show errors but will not fail
        if: ${{ always() && inputs.disable_phpcpd != true }}
        run: moodle-plugin-ci phpcpd

      - name: PHP Mess Detector
        continue-on-error: true # This step will show errors but will not fail
        if: ${{ always() && inputs.enable_phpmd == true }}
        run: moodle-plugin-ci phpmd

      - name: Run codechecker
        if: ${{ always() && inputs.disable_phpcs != true }}
        run: moodle-plugin-ci codechecker --max-warnings=${{ inputs.codechecker_max_warnings }}

      - name: Moodle PHPDoc Checker
        if: ${{ always() && inputs.disable_phpdoc != true }}
        run: moodle-plugin-ci phpdoc

      - name: Run validate
        if: ${{ always() && inputs.disable_ci_validate != true }}
        run: moodle-plugin-ci validate

      - name: Run savepoints
        if: ${{ always() }}
        run: moodle-plugin-ci savepoints

      - name: Run mustache Lint
        if: ${{ always() && inputs.disable_mustache != true }}
        run: moodle-plugin-ci mustache

      - name: Run grunt
        if: ${{ always() && inputs.disable_grunt != true }}
        run: moodle-plugin-ci grunt

      - name: Run phpunit
        if: ${{ always() && inputs.disable_phpunit != true }}
        run: |
          moodle-plugin-ci phpunit --testdox

      - name: Run behat
        if: ${{ always() && inputs.disable_behat != true }}
        run: moodle-plugin-ci behat --profile chrome

      - name: Upload Behat Faildump
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: Behat Faildump (${{ join(matrix.*, ', ') }})
          path: ${{ github.workspace }}/moodledata/behat_dump
          retention-days: 2
          if-no-files-found: ignore

      - name: Run custom steps
        if: ${{ always() && inputs.custom_steps != '' }}
        run: |
          echo "::group::Running custom steps"

          ${{ inputs.custom_steps }}

          echo "::endgroup::"

  release:
    name: Release to the Moodle plugin directory
    needs: [setup, prepare_matrix]
    # If it matches a standard branch naming convention, it should permit a
    # release to happen, otherwise this step should be skipped.
    # Patterns allowed:
    # - MOODLE_XX_STABLE
    # - MOODLE_XXX_STABLE
    # - main
    if: needs.prepare_matrix.outputs.release_required == 'true'
    runs-on: 'ubuntu-latest'
    outputs:
      has-secrets: ${{ steps.check-secrets.outputs.has-secrets }}
    steps:
      - name: Check if MOODLE_ORG_TOKEN has been supplied
        id: check-secrets
        env:
          SECRET_TO_CHECK: '${{ secrets.moodle_org_token }}'
        if: ${{ env.SECRET_TO_CHECK != '' }}
        run: echo "has-secrets=true" >> $GITHUB_OUTPUT

      - name: Check out CI code
        uses: actions/checkout@v4
        with:
          path: ci
          repository: Wunderbyte-GmbH/catalyst-moodle-workflows
          ref: ${{ inputs.internal_workflow_branch }}
          token: ${{ github.token }}

      - name: Run plugin release
        if: steps.check-secrets.outputs.has-secrets != ''
        uses: ./ci/.github/plugin/release
        with:
          plugin_name: ${{ needs.prepare_matrix.outputs.component }}
          moodle_org_token: ${{ secrets.moodle_org_token }}
